NOTES — PYTHON data structures

Variables —> stores the reference to the value rather than the value itself




Built in collection data types:

The ordered collections are

1. List

2. String

3. Tuples




Unordered collections are:

1. Dictionaries

2. Sets




Strings —> common string methods are:

	test_string.center(w) 		— returns a centred string in a field of width ‘w’

	test_string.count(item) 	— returns the number of occurrences of items in a string

	test_string.ljust(w)		— adjusts the string by left justifying it in a field of width ‘w’

	test_string.rjust(w)		— adjusts the string by right justifying it in a field of width ‘w’

	test_string.lower()		— converts all characters to lower case

	test_string.upper()		— converts all characters to upper case

	test_string.find(item)		— returns the index of the first occurrence of the item

	test_string.split(item)		— uses the item to act as a point of division of the string




Strings vs list:

1. List can be modified. Strings cannot be




Tuples vs lists

1. Lists can be modified. Tuples cannot be




Sets vs lists

1. Lists can be modified. Sets cannot be

2. Lists allow duplicates. Sets do not allow duplicates




OPERATORS on a SET in python:

	Membership				— in operator		- returns if the element is present in the set

	Length					— len(set1)		— returns the length of the set

	|					— set1 | set2		— returns a new set that contains elements from both sets

	&					— set1 & set2		— returns a new set that contains only elements common to both sets

	-					— set1 - set2		— returns a new set that contains elements present in set1 but not in set2

	<=					— set1 <= set2		— asks whether all elements in set1 are present in set2

	

METHODS on a SET in python:

	set1.union(set2)			— returns new set that contains elements from both the sets					— similar to | operator

	set1.intersection(set2)			— returns new set that contains only elements that are common to both the sets			— similar to & operator

	set1.differenct(set2)			— returns new set that contains only elements present in set 1 but not in set 2			— similar to - operator

	set1.issubset(set2)			— asks if set 2 is a subset of set 1								— similar to <= operator	

	set1.add(item)				— adds the item to the set

	set1.remove(item)			— removes the specified item from the set

	set1.pop()				— removes an arbitrary item from the set

	set1.clear()				— removes all items from the set




OPERATORS on a DICTIONARY in python

	[]					-- test_dic[k]		-- returns the value associated with the key 'k'

	in					-- key in test_dic	-- returns True if the key exists, False if the key doesn't exist

	del					-- del test_dic[k]	-- deletes the entry 'k' from the dictionary




 METHODS on a DICTIONARY in python

	test_dic.keys()				-- returns the keys in the dictionary 												

	test_dic.values()			-- returns the values in the dictionary

	test_dic.items()			-- returns the keys and values in the dictionary 

	test_dic.get(k)				-- returns the value associated with the key 'k'

	test_dic.get(k, alts)			-- returns the value associated with the key 'k', and if no value is not found, it returns the default alt message


METHODS in a LIST in python
	test_list.append(i)			-- appends element 'I' to the end of the list
	test_list.insert(I, item)		-- inserts the item to the 'I' position in the list
	test_list.pop()				-- removes the last element from the list
	test_list.pop(u)			-- removes and returns the element u from the list
	test_list.sort()			-- sorts the list in ascending order
	test_list.reverse()			-- reverses the elements in the list
	del test_list[u]			-- deletes the element at index u in the list
	test_list.index(item)			-- returns the index of the item in the list
	test_list.count(item)			-- returns the number of occurrences of the item in the list
	test_list.remove(item)			-- removes all the occurrences of the item from the list
	
